// Generated by CoffeeScript 1.7.1
(function() {
  var mapDataToURL;

  mapDataToURL = require("../utils/MapDataToURL.coffee");

  module.exports = function($timeout, $http) {
    return {
      restrict: 'E',
      scope: {
        isUniqueQuietMillis: '@',
        isUniqueMapData: '@'
      },
      link: function(scope, elm, attrs) {
        var load, maximumInputLength, minimumInputLength, quietMillis, timeoutPromise;
        timeoutPromise = null;
        minimumInputLength = (attrs.minimumInputLength != null) && !isNaN(attrs.minimumInputLength) ? attrs.minimumInputLength : 3;
        maximumInputLength = (attrs.maximumInputLength != null) && !isNaN(attrs.maximumInputLength) ? attrs.maximumInputLength : null;
        quietMillis = (attrs.quietMillis != null) && !isNaN(attrs.quietMillis) ? attrs.quietMillis : 500;
        attrs.$observe("updateOnModelChange", function(newValue, oldValue) {
          if ((newValue == null) || newValue === oldValue) {
            return;
          }
          $timeout.cancel(timeoutPromise);
          return timeoutPromise = $timeout(function() {
            if (newValue.length >= minimumInputLength && (maximumInputLength === null || newValue.length < maximumInputLength)) {
              return load();
            }
          }, quietMillis);
        });
        return load = function() {
          var dataType, onError, onSuccess, url;
          url = mapDataToURL(attrs.path, attrs.mapData, scope);
          if ((url == null) || url === "") {
            elm.parent().removeClass("ng-loading");
            return;
          }
          elm.parent().addClass("ng-loading");
          dataType = attrs.queryDataType || "json";
          if (dataType === "jsonp") {
            if (url.indexOf("?") < 0) {
              url += "?callback=JSON_CALLBACK";
            } else {
              if (url.indexOf("callback=JSON_CALLBACK") < 0) {
                url = url.replace(/\?/gi, "?callback=JSON_CALLBACK&");
              }
            }
            $http.jsonp(url).success(function(response) {
              return onSuccess(response);
            }).error(function() {
              return onError();
            });
          } else {
            $http.get(url).success(onSuccess).error(onError);
          }
          onSuccess = function(response) {
            elm.parent().removeClass("ng-loading");
            return scope[attrs.variable] = response;
          };
          return onError = function() {
            elm.parent().removeClass("ng-loading");
            return scope[attrs.variable] = {};
          };
        };
      }
    };
  };

}).call(this);

//# sourceMappingURL=JsonResource.map
