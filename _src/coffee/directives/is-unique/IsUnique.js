// Generated by CoffeeScript 1.7.1
(function() {
  var mapDataToURL;

  mapDataToURL = require("../../utils/MapDataToURL.coffee");

  module.exports = function($timeout, $http) {
    return {
      restrict: 'A',
      require: '?ngModel',
      scope: {
        isUniqueQuietMillis: '@',
        isUniqueMapData: '@'
      },
      link: function(scope, elm, attrs, ngModel) {
        var quietMillis, timeoutDigest, timeoutPromise, validatorFn;
        timeoutPromise = null;
        timeoutDigest = -1;
        quietMillis = attrs.isUniqueQuietMillis !== null && !isNaN(attrs.isUniqueQuietMillis) ? attrs.quietMillis : 500;
        scope.$watch(function() {
          return ngModel.$viewValue;
        }, function(newValue) {
          if (newValue !== ngModel.$modelValue) {
            return elm.addClass("ng-is-unique-pending");
          }
        });
        scope.$watch(function() {
          return ngModel.$modelValue;
        }, function(newValue) {
          clearTimeout(timeoutDigest);
          $timeout.cancel(timeoutPromise);
          elm.removeClass("ng-is-unique-error-loading");
          if ((newValue == null) || newValue.length < 2 || attrs.isUnique === "" || attrs.isUnique.length < 2) {
            elm.removeClass("ng-is-unique-loading");
            elm.removeClass("ng-loading");
            return;
          }
          elm.removeClass("ng-is-unique-pending");
          elm.addClass("ng-is-unique-loading");
          elm.addClass("ng-loading");
          return timeoutPromise = $timeout(function() {
            var update, url;
            url = mapDataToURL(attrs.isUnique, attrs.isUniqueMapData, scope.$parent);
            $http({
              method: 'GET',
              url: url
            }).success(function(data) {
              elm.removeClass("ng-is-unique-error-loading");
              if (data.isUnique === null) {
                return;
              }
              validatorFn(newValue, data.isUnique === "true");
              return update();
            }).error(function() {
              elm.addClass("ng-is-unique-error-loading");
              validatorFn(newValue, true);
              return update();
            }).then(function() {
              elm.removeClass("ng-is-unique-pending");
              elm.removeClass("ng-is-unique-loading");
              elm.removeClass("ng-loading");
              return update();
            });
            return update = function() {
              return timeoutDigest = setTimeout(function() {
                return elm.trigger("keyup");
              }, 100);
            };
          }, quietMillis - 100);
        });
        validatorFn = function(modelValue, value) {
          if (value) {
            ngModel.$setValidity('isUnique', true);
          } else {
            ngModel.$setValidity('isUnique', false);
          }
          return modelValue;
        };
        return ngModel.$parsers.unshift(validatorFn);
      }
    };
  };

}).call(this);

//# sourceMappingURL=IsUnique.map
