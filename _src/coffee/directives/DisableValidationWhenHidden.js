// Generated by CoffeeScript 1.7.1
(function() {
  var formElements;

  formElements = require("../utils/FormElements.coffee");

  module.exports = function() {
    return {
      restrict: 'A',
      require: ['^form', '?^formTab'],
      scope: {
        isUniqueQuietMillis: '@',
        isUniqueMapData: '@'
      },
      link: function(scope, elm, attrs, ctrls) {
        var controlElements, controls, form, formTab, update;
        form = ctrls[0];
        formTab = ctrls[1];
        controlElements = element.find(formElements);
        controls = [];
        if (typeof formTab !== "undefined" && typeof formTab.scope.disabled !== "undefined") {
          formTab.scope.$watch("disabled", function(value) {
            return update(scope.$eval(attrs.ngShow));
          });
        }
        if (typeof attrs.ngShow !== "undefined") {
          scope.$watch(attrs.ngShow, function(value) {
            return update(value);
          });
        }
        if (typeof attrs.ngHide !== "undefined") {
          scope.$watch(attrs.ngHide, function(value) {
            return update(!value);
          });
        }
        return update = function(value) {
          var i;
          i = 0;
          return controlElements.each(function() {
            var control, element;
            element = $(this);
            control = form[element.attr("name")];
            if (typeof control === "undefined") {
              control = controls[i];
              i++;
            } else {
              controls.push(control);
            }
            if (typeof control === "undefined") {
              return;
            }
            if (value === true) {
              $(element).removeAttr('disabled');
              form.$addControl(control);
              return angular.forEach(control.$error, function(validity, validationToken) {
                return form.$setValidity(validationToken, !validity, control);
              });
            } else {
              $(element).attr('disabled', 'disabled');
              return form.$removeControl(control);
            }
          });
        };
      }
    };
  };

}).call(this);

//# sourceMappingURL=DisableValidationWhenHidden.map
