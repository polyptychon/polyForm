// Generated by CoffeeScript 1.7.1
(function() {
  var $, formatStringURL;

  $ = require("jquery");

  formatStringURL = require("../utils/FormatStringURL.coffee");

  module.exports = function($timeout, $http) {
    return {
      restrict: 'A',
      link: function(scope, elm, attrs) {
        var callback, getData, inputValue, items, maximumInputLength, maximumSelectionSize, minimumInputLength, multiple, quietMillis, timeoutPromise, updateData;
        multiple = attrs.multiple === "true" || attrs.ngMultiple === "true";
        minimumInputLength = typeof attrs.minimumInputLength !== "undefined" && !isNaN(attrs.minimumInputLength) ? attrs.minimumInputLength : 3;
        maximumInputLength = typeof attrs.maximumInputLength !== "undefined" && !isNaN(attrs.maximumInputLength) ? attrs.maximumInputLength : null;
        maximumSelectionSize = typeof attrs.maximumSelectionSize !== "undefined" && !isNaN(attrs.maximumSelectionSize) ? attrs.maximumSelectionSize : null;
        quietMillis = typeof attrs.quietMillis !== "undefined" && !isNaN(attrs.quietMillis) ? attrs.quietMillis : 500;
        items = [];
        inputValue = "";
        timeoutPromise = null;
        callback = null;
        $(elm).on('select2-focus', function() {
          return $(elm).parent().find('#s2id_' + attrs.id + ' input').on('input', function() {
            inputValue = $(this).val();
            if (inputValue.length >= minimumInputLength && (maximumInputLength === null || inputValue.length < maximumInputLength)) {
              return updateData(inputValue);
            }
          });
        });
        scope[attrs.name] = {};
        scope[attrs.name].uiSelect2QueryData = {
          minimumInputLength: minimumInputLength,
          maximumInputLength: maximumInputLength,
          maximumSelectionSize: maximumSelectionSize,
          allowClear: attrs.allowClear === "true",
          multiple: multiple,
          query: function(query) {
            var data;
            data = {
              results: []
            };
            if (inputValue.length > minimumInputLength) {
              angular.forEach(items.results, function(item, key) {
                return data.results.push(item);
              });
            }
            callback = query.callback;
            return query.callback(data);
          },
          formatNoMatches: function() {
            return attrs.queryNoMatchesMessage || "Δεν βρέθηκαν αποτελέσματα";
          },
          formatInputTooShort: function(input, min) {
            var n;
            n = min - input.length;
            return attrs.queryTooShortMessage || "Παρακαλούμε εισάγετε " + n + " περισσότερο" + (n > 1 ? "υς" : "") + " χαρακτήρ" + (n > 1 ? "ες" : "α");
          },
          formatInputTooLong: function(input, max) {
            var n;
            n = input.length - max;
            return attrs.queryTooLongMessage || "Παρακαλούμε διαγράψτε " + n + " χαρακτήρ" + (n > 1 ? "ες" : "α");
          },
          formatSelectionTooBig: function(limit) {
            return attrs.querySelectionTooBigMessage || "Μπορείτε να επιλέξετε μόνο " + limit + " αντικείμεν" + (limit > 1 ? "α" : "ο");
          },
          formatLoadMore: function(pageNumber) {
            return attrs.queryLoadMoreMessage || "Φόρτωση περισσότερων…";
          },
          formatSearching: function() {
            return attrs.querySearchingMessage || "Αναζήτηση…";
          },
          formatInitMessage: function() {
            return attrs.queryInitMessage || "Πληκτρολογήστε στο πεδίο για αναζήτηση";
          },
          initSelection: function(element, callback) {}
        };
        elm.on("select2-opening", function() {
          $(".select2-drop .select2-results li.select2-no-results").text(scope[attrs.name].uiSelect2QueryData.formatInitMessage());
          items = {
            results: []
          };
          if (callback) {
            return callback(items);
          }
        });
        elm.on("select2-open", function() {
          return $(".select2-drop .select2-results li.select2-no-results").text(scope[attrs.name].uiSelect2QueryData.formatInitMessage());
        });
        updateData = function(val) {
          $timeout.cancel(timeoutPromise);
          $(".select2-drop .select2-results li.select2-no-results").text(scope[attrs.name].uiSelect2QueryData.formatSearching());
          elm.parent().addClass("ng-loading");
          return timeoutPromise = $timeout(function() {
            return getData(val);
          }, quietMillis);
        };
        return getData = function(val) {
          var dataType, obj, onError, onSuccess, url;
          url = attrs.uiSelect2Query;
          obj = typeof attrs.queryMapData !== "undefined" ? scope.$eval(attrs.queryMapData) : {};
          obj.value = val;
          url = formatStringURL(url, obj);
          dataType = attrs.queryDataType || "json";
          if (dataType === "jsonp") {
            if (url.indexOf("?") < 0) {
              url += "?callback=JSON_CALLBACK";
            } else {
              if (url.indexOf("callback=JSON_CALLBACK") < 0) {
                url = url.replace(/\?/gi, "?callback=JSON_CALLBACK&");
              }
            }
            $http.jsonp(url).success(function(response) {
              return onSuccess(response);
            }).error(function() {
              return onError();
            });
          } else {
            $http.get(url).success(onSuccess).error(onError);
          }
          onError = function() {
            var data;
            elm.parent().removeClass("ng-loading");
            data = {
              hasError: true
            };
            if (callback) {
              return callback(data);
            }
          };
          return onSuccess = function(response) {
            var arrayPath, childId, childText, childrenPath, data, id, isParentSelectable, loadedItems, text;
            elm.parent().removeClass("ng-loading");
            data = {
              results: []
            };
            loadedItems = response;
            arrayPath = attrs.queryResultsArrayPath;
            if (typeof arrayPath !== "undefined" && arrayPath !== "") {
              loadedItems = eval("loadedItems." + arrayPath);
            }
            id = "id";
            text = "text";
            childId = "id";
            childText = "text";
            childrenPath = "children";
            isParentSelectable = false;
            if (typeof attrs.queryResultId !== "undefined") {
              childId = id = attrs.queryResultId;
            }
            if (typeof attrs.queryResultText !== "undefined") {
              childText = text = attrs.queryResultText;
            }
            if (typeof attrs.queryResultChildId !== "undefined") {
              childId = attrs.queryResultChildId;
            }
            if (typeof attrs.queryResultChildText !== "undefined") {
              childText = attrs.queryResultChildText;
            }
            if (typeof attrs.queryResultChildrenPath !== "undefined") {
              childrenPath = attrs.queryResultChildrenPath;
            }
            if (typeof attrs.queryResultIsParentSelectable !== "undefined") {
              isParentSelectable = attrs.queryResultIsParentSelectable === "true";
            }
            angular.forEach(loadedItems, function(item, key) {
              if (item[childrenPath] && Array.isArray(item[childrenPath])) {
                item.children = [];
                angular.forEach(item[childrenPath], function(childItem, key) {
                  childItem.id = childItem[childId];
                  childItem.text = childItem[childText];
                  item.children.push(childItem);
                  if (isParentSelectable) {
                    item.id = item[id];
                  }
                  return item.text = item[text];
                });
              } else {
                item.id = item[id];
                item.text = item[text];
              }
              return data.results.push(item);
            });
            items = data;
            if (callback) {
              return callback(data);
            }
          };
        };
      }
    };
  };

}).call(this);

//# sourceMappingURL=UiSelect2Query.map
